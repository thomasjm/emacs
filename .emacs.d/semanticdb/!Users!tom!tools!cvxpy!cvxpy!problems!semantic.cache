;; Object problems/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "problems/"
  :tables (list 
   (semanticdb-table "problem.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
Copyright 2013 Steven Diamond

This file is part of CVXPY.

CVXPY is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

CVXPY is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with CVXPY.  If not, see <http://www.gnu.org/licenses/>.
\"\"\"" code nil nil [1 659])
            ("settings" include nil nil [669 689])
            ("utilities" include nil nil [698 719])
            ("interface" include nil nil [728 752])
            ("OrderedSet" include nil nil [782 799])
            ("Expression" include nil nil [830 847])
            ("Constant" include nil nil [877 892])
            ("Variable" include nil nil [922 937])
            ("EqConstraint" include nil nil [957 1038])
            ("LeqConstraint" include nil nil [957 1038])
            ("SOC" include nil nil [957 1038])
            ("SDP" include nil nil [957 1038])
            ("ExpCone" include nil nil [957 1038])
            ("Minimize" include nil nil [1055 1080])
            ("Maximize" include nil nil [1055 1080])
            ("kktsolver" include nil nil [1081 1116])
            ("collections" include nil nil [1118 1153])
            ("itertools" include nil nil [1154 1170])
            ("numbers" include nil nil [1171 1185])
            ("cvxopt" include nil nil [1186 1199])
            ("cvxopt.solvers" include nil nil [1200 1221])
            ("ecos" include nil nil [1222 1233])
            ("numpy" include nil nil [1234 1252])
            ("scipy.sparse" include nil nil [1253 1278])
            ("Problem" type
               (:documentation "A convex optimization problem.

    Attributes
    ----------
    objective : Minimize or Maximize
        The expression to minimize or maximize.
    constraints : list
        The constraints on the problem variables.
    "
                :superclasses ("u.Canonical")
                :members 
                  ( ("REGISTERED_SOLVE_METHODS" variable nil (reparse-symbol indented_block_body) [1583 1612])
                    ("_SPARSE_INTF" variable nil (reparse-symbol indented_block_body) [1665 1709])
                    ("_DENSE_INTF" variable nil (reparse-symbol indented_block_body) [1714 1750])
                    ("_CVXOPT_DENSE_INTF" variable nil (reparse-symbol indented_block_body) [1755 1816])
                    ("_CVXOPT_SPARSE_INTF" variable nil (reparse-symbol indented_block_body) [1821 1885])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1948 2001])
                            ("self" variable nil (reparse-symbol indented_block_body) [2009 2035])
                            ("self" variable nil (reparse-symbol indented_block_body) [2044 2074])
                            ("self" variable nil (reparse-symbol indented_block_body) [2083 2101])
                            ("self" variable nil (reparse-symbol indented_block_body) [2110 2129]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1904 1908])
                            ("objective" variable nil (reparse-symbol function_parameters) [1910 1919])
                            ("constraints" variable nil (reparse-symbol function_parameters) [1921 1932]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1891 2130])
                    ("value" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2159 2163]))                          
                        :documentation "The value from the last time the problem was solved.

        Returns
        -------
        float or None
        ")
                        (reparse-symbol indented_block_body) [2135 2324])
                    ("status" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2354 2358]))                          
                        :documentation "The status from the last time the problem was solved.

        Returns
        -------
        str
        ")
                        (reparse-symbol indented_block_body) [2329 2511])
                    ("is_dcp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2527 2531]))                          
                        :documentation "Does the problem satisfy DCP rules?
        ")
                        (reparse-symbol indented_block_body) [2516 2673])
                    ("_filter_constraints" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2702 2706])
                            ("constraints" variable nil (reparse-symbol function_parameters) [2708 2719]))                          
                        :documentation "Separate the constraints by type.

        Parameters
        ----------
        constraints : list
            A list of constraints.

        Returns
        -------
        dict
            A map of type key to an ordered set of constraints.
        ")
                        (reparse-symbol indented_block_body) [2678 3682])
                    ("canonicalize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3704 3708]))                          
                        :documentation "Computes the graph implementation of the problem.

        Returns
        -------
        tuple
            (affine objective, constraints list, the cone dimensions)
        ")
                        (reparse-symbol indented_block_body) [3687 4708])
                    ("variables" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4727 4731]))                          
                        :documentation "Returns a list of the variables in the problem.
        ")
                        (reparse-symbol indented_block_body) [4713 4989])
                    ("parameters" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5009 5013]))                          
                        :documentation "Returns a list of the parameters in the problem.
        ")
                        (reparse-symbol indented_block_body) [4994 5277])
                    ("solve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5292 5296])
                            ("args" variable nil (reparse-symbol function_parameters) [5298 5303])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5305 5313]))                          
                        :documentation "Solves the problem using the specified method.

        Parameters
        ----------
        method : function
            The solve method to use.
        solver : str, optional
            The solver to use. Defaults to ECOS.
        verbose : bool, optional
            Overrides the default of hiding solver output.

        Returns
        -------
        float
            The optimal value for the problem, or a string indicating
            why the problem could not be solved.
        ")
                        (reparse-symbol indented_block_body) [5282 6079])
                    ("register_solve" function
                       (:documentation "Adds a solve method to the Problem class.

        Parameters
        ----------
        name : str
            The keyword for the method.
        func : function
            The function that executes the solve method.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6120 6123])
                            ("name" variable nil (reparse-symbol function_parameters) [6125 6129])
                            ("func" variable nil (reparse-symbol function_parameters) [6131 6135]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [6084 6432])
                    ("_solve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6448 6452])
                            ("solver" variable nil (reparse-symbol function_parameters) [6454 6460])
                            ("ignore_dcp" variable nil (reparse-symbol function_parameters) [6467 6477])
                            ("verbose" variable nil (reparse-symbol function_parameters) [6485 6492]))                          
                        :documentation "Solves a DCP compliant optimization problem.

        Saves the values of primal and dual variables in the variable
        and constraint objects, respectively.

        Parameters
        ----------
        solver : str, optional
            The solver to use. Defaults to ECOS.
        ignore_dcp : bool, optional
            Overrides the default of raising an exception if the problem is not
            DCP.
        verbose : bool, optional
            Overrides the default of hiding solver output.

        Returns
        -------
        float
            The optimal value for the problem, or a string indicating
            why the problem could not be solved.
        ")
                        (reparse-symbol indented_block_body) [6437 8726])
                    ("_ecos_solve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8747 8751])
                            ("objective" variable nil (reparse-symbol function_parameters) [8753 8762])
                            ("constr_map" variable nil (reparse-symbol function_parameters) [8764 8774])
                            ("dims" variable nil (reparse-symbol function_parameters) [8776 8780])
                            ("sorted_vars" variable nil (reparse-symbol function_parameters) [8802 8813])
                            ("var_offsets" variable nil (reparse-symbol function_parameters) [8815 8826])
                            ("x_length" variable nil (reparse-symbol function_parameters) [8828 8836])
                            ("verbose" variable nil (reparse-symbol function_parameters) [8858 8865]))                          
                        :documentation "Calls the ECOS solver and returns the result.

        Parameters
        ----------
            objective: Expression
                The canonicalized objective.
            constr_map: dict
                A dict of the canonicalized constraints.
            dims: dict
                A dict with information about the types of constraints.
            sorted_vars: list
                An ordered list of the problem variables.
            var_offsets: dict
                A dict mapping variable id to offset in the stacked variable x.
            x_length: int
                The height of x.
            verbose: bool
                Should the solver show output?

        Returns
        -------
        tuple
            (status, optimal objective, optimal x,
             optimal equality constraint dual,
             optimal inequality constraint dual)

        ")
                        (reparse-symbol indented_block_body) [8731 10964])
                    ("_cvxopt_solve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10988 10992])
                            ("objective" variable nil (reparse-symbol function_parameters) [10994 11003])
                            ("constr_map" variable nil (reparse-symbol function_parameters) [11005 11015])
                            ("dims" variable nil (reparse-symbol function_parameters) [11017 11021])
                            ("sorted_vars" variable nil (reparse-symbol function_parameters) [11045 11056])
                            ("var_offsets" variable nil (reparse-symbol function_parameters) [11058 11069])
                            ("x_length" variable nil (reparse-symbol function_parameters) [11071 11079])
                            ("verbose" variable nil (reparse-symbol function_parameters) [11103 11110]))                          
                        :documentation "Calls the CVXOPT conelp or cpl solver and returns the result.

        Parameters
        ----------
            objective: Expression
                The canonicalized objective.
            constr_map: dict
                A dict of the canonicalized constraints.
            dims: dict
                A dict with information about the types of constraints.
            sorted_vars: list
                An ordered list of the problem variables.
            var_offsets: dict
                A dict mapping variable id to offset in the stacked variable x.
            x_length: int
                The height of x.
            verbose: bool
                Should the solver show output?

        Returns
        -------
        tuple
            (status, optimal objective, optimal x,
             optimal equality constraint dual,
             optimal inequality constraint dual)

        ")
                        (reparse-symbol indented_block_body) [10970 14418])
                    ("_handle_failure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14443 14447])
                            ("status" variable nil (reparse-symbol function_parameters) [14449 14455])
                            ("variables" variable nil (reparse-symbol function_parameters) [14457 14466])
                            ("constraints" variable nil (reparse-symbol function_parameters) [14468 14479]))                          
                        :documentation "Updates value fields based on the cause of solver failure.

        Parameters
        ----------
            status: str
                The status of the solver.
            variables: list
                The problem variables.
            constraints: list
                The problem constraints.
        ")
                        (reparse-symbol indented_block_body) [14423 15301])
                    ("_get_var_offsets" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15327 15331])
                            ("objective" variable nil (reparse-symbol function_parameters) [15333 15342])
                            ("constraints" variable nil (reparse-symbol function_parameters) [15344 15355]))                          
                        :documentation "Maps each variable to a horizontal offset.

        Parameters
        ----------
        objective : Expression
            The canonicalized objective.
        constraints : list
            The canonicalized constraints.

        Returns
        -------
        tuple
            (ordered list of variables, map of variable to offset,
             length of variable vector)
        ")
                        (reparse-symbol indented_block_body) [15306 16411])
                    ("_save_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16433 16437])
                            ("result_vec" variable nil (reparse-symbol function_parameters) [16439 16449])
                            ("objects" variable nil (reparse-symbol function_parameters) [16451 16458]))                          
                        :documentation "Saves the values of the optimal primal/dual variables.

        Parameters
        ----------
        results_vec : array_like
            A vector containing the variable values.
        objects : list
            The variables or constraints where the values will be stored.
        ")
                        (reparse-symbol indented_block_body) [16416 17403])
                    ("_constr_matrix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17427 17431])
                            ("aff_expressions" variable nil (reparse-symbol function_parameters) [17433 17448])
                            ("var_offsets" variable nil (reparse-symbol function_parameters) [17450 17461])
                            ("x_length" variable nil (reparse-symbol function_parameters) [17463 17471])
                            ("matrix_intf" variable nil (reparse-symbol function_parameters) [17496 17507])
                            ("vec_intf" variable nil (reparse-symbol function_parameters) [17509 17517]))                          
                        :documentation "Returns a matrix and vector representing a list of constraints.

        In the matrix, each constraint is given a block of rows.
        Each variable coefficient is inserted as a block with upper
        left corner at matrix[variable offset, constraint offset].
        The constant term in the constraint is added to the vector.

        Parameters
        ----------
        aff_expressions : list
            A list of affine expressions or constraints.
        var_offsets : dict
            A dict of variable id to horizontal offset.
        x_length : int
            The length of the x vector.
        matrix_intf : interface
            The matrix interface to use for creating the constraints matrix.
        vec_intf : interface
            The matrix interface to use for creating the constant vector.

        Returns
        -------
        tuple
            A (matrix, vector) tuple.
        ")
                        (reparse-symbol indented_block_body) [17408 20539])
                    ("_merge_nonlin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20562 20566])
                            ("nl_constr" variable nil (reparse-symbol function_parameters) [20568 20577])
                            ("var_offsets" variable nil (reparse-symbol function_parameters) [20579 20590])
                            ("x_length" variable nil (reparse-symbol function_parameters) [20592 20600]))                          
                        :documentation " TODO: ensure that this works with numpy data structs...
        ")
                        (reparse-symbol indented_block_body) [20544 22283])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22300 22304]))                          )
                        (reparse-symbol indented_block_body) [22288 22333])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22351 22355]))                          )
                        (reparse-symbol indented_block_body) [22338 22476]))                  
                :type "class")
                nil [1280 22476]))          
    :file "problem.py"
    :pointmax 22476
    :fsize 22475
    :lastmodtime '(21310 35350 0 0)
    :unmatched-syntax '((FROM 1039 . 1043) (PERIOD 1044 . 1045) (PERIOD 944 . 945) (FROM 938 . 942) (PERIOD 943 . 944) (PERIOD 899 . 900) (FROM 893 . 897) (PERIOD 898 . 899) (PERIOD 854 . 855) (FROM 848 . 852) (PERIOD 853 . 854) (PERIOD 806 . 807) (FROM 800 . 804) (PERIOD 805 . 806) (PERIOD 759 . 760) (FROM 753 . 757) (PERIOD 758 . 759) (PERIOD 726 . 727) (FROM 720 . 724) (PERIOD 725 . 726) (PERIOD 696 . 697) (FROM 690 . 694) (PERIOD 695 . 696) (PERIOD 667 . 668) (FROM 661 . 665) (PERIOD 666 . 667))
    )
   (semanticdb-table "kktsolver.py"
    :file "kktsolver.py"
    :fsize 3728
    :lastmodtime '(21253 53712 0 0)
    )
   )
  :file "!Users!tom!tools!cvxpy!cvxpy!problems!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
